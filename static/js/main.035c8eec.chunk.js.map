{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Navbar","className","href","TodoForm","props","useState","title","setTitle","onChange","event","target","value","onKeyPress","key","onAdd","id","type","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onClick","preventDefault","removeHandler","App","setTodos","newTodo","Date","now","prev","window","confirm","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAgBeA,EAdU,WACvB,OACE,6BACE,yBAAKC,UAAU,eACb,uBAAGC,KAAK,IAAID,UAAU,cAAtB,cACA,wBAAIA,UAAU,8BACZ,4BAAI,uBAAGC,KAAK,KAAR,4DACJ,4BAAI,uBAAGA,KAAK,KAAR,qECqBCC,EAxB2B,SAACC,GAAW,IAAD,EACzBC,mBAAiB,IADQ,mBAC5CC,EAD4C,KACrCC,EADqC,KAcnD,OACE,yBAAKN,UAAU,eACb,2BAAOO,SAbW,SAACC,GACrBF,EAASE,EAAMC,OAAOC,QAYYC,WATZ,SAACH,GACL,UAAdA,EAAMI,MACRT,EAAMU,MAAMR,GACZC,EAAS,MAMoDI,MAAOL,EAAOS,GAAG,QAAQC,KAAK,OAAOC,YAAY,8EAC9G,2BAAOC,QAAQ,QAAQjB,UAAU,UAAjC,iGCeSkB,EA7B2B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC5D,GAAqB,IAAjBF,EAAMG,OACR,OAAO,uBAAGtB,UAAU,UAAb,iEAQT,OACE,4BACGmB,EAAMI,KAAI,SAAAC,GACT,IAAMC,EAAU,CAAC,QAEjB,OADID,EAAKE,WAAWD,EAAQE,KAAK,aAE/B,wBAAIf,IAAKY,EAAKV,GAAId,UAAWyB,EAAQG,KAAK,MACxC,+BACE,2BAAOb,KAAK,WAAWc,QAASL,EAAKE,UAAWnB,SAAU,kBAAMc,EAASG,EAAKV,OAC9E,8BAAOU,EAAKnB,OACZ,uBAAGL,UAAU,0BAA0B8B,QAAS,SAAAtB,GAAK,OAf3C,SAACA,EAAyBM,GAC9CN,EAAMuB,iBACNX,EAASN,GAa0DkB,CAAcxB,EAAOgB,EAAKV,MAAnF,iBCkBCmB,EAzCO,WAAO,IAAD,EACA7B,mBAAkB,IADlB,mBACnBe,EADmB,KACZe,EADY,KA+B1B,OAAQ,oCACN,kBAAC,EAAD,MACA,yBAAKlC,UAAU,aACb,kBAAC,EAAD,CAAUa,MA/BK,SAACR,GAClB,IAAM8B,EAAiB,CACrB9B,QACAS,GAAIsB,KAAKC,MACTX,WAAW,GAEbQ,GAAS,SAAAI,GAAI,OAAKH,GAAL,mBAAiBG,UA0B5B,kBAAC,EAAD,CAAUnB,MAAOA,EAAOC,SAXN,SAACN,GACAyB,OAAOC,QAAQ,yKAElCN,GAAS,SAAAI,GAAI,OAAIA,EAAKG,QAAO,SAAAjB,GAAI,OAAIA,EAAKV,KAAOA,SAQAO,SAvB/B,SAACP,GACrBoB,GAAS,SAAAI,GAAI,OAAIA,EAAKf,KAAI,SAAAC,GACxB,OAAIA,EAAKV,KAAOA,EACP,2BACFU,GADL,IAEEE,WAAYF,EAAKE,YAGdF,cCrBbkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.035c8eec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper\">\r\n        <a href=\"/\" className=\"brand-logo\">TypeScript</a>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li><a href=\"/\">Список дел</a></li>\r\n          <li><a href=\"/\">Информация</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void\r\n}\r\n\r\nconst TodoForm: React.FC<TodoFormProps> = (props) => {\r\n  const [title, setTitle] = useState<string>('')\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.target.value)\r\n  }\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === 'Enter') {\r\n      props.onAdd(title)\r\n      setTitle('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-field\">\r\n      <input onChange={changeHandler} onKeyPress={keyPressHandler} value={title} id=\"title\" type=\"text\" placeholder=\"Помыть машину\" />\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Заголовок задачи\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm\r\n","import React from 'react'\r\nimport { ITodo } from '../interfaces'\r\n\r\ninterface TodoListProps {\r\n  todos: ITodo[],\r\n  onToggle(id: number): void,\r\n  onRemove(id: number): void\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({ todos, onRemove, onToggle }) => {\r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">Список пуст</p>\r\n  }\r\n\r\n  const removeHandler = (event: React.MouseEvent, id: number) => {\r\n    event.preventDefault()\r\n    onRemove(id)\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {todos.map(todo => {\r\n        const classes = ['todo']\r\n        if (todo.completed) classes.push('completed')\r\n        return (\r\n          <li key={todo.id} className={classes.join(' ')}>\r\n            <label>\r\n              <input type=\"checkbox\" checked={todo.completed} onChange={() => onToggle(todo.id)} />\r\n              <span>{todo.title}</span>\r\n              <i className=\"material-icons red-text\" onClick={event => removeHandler(event, todo.id)}>delete</i>\r\n            </label>\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport { ITodo } from './interfaces'\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title,\n      id: Date.now(),\n      completed: false\n    }\n    setTodos(prev => [newTodo, ...prev])\n  }\n\n  const toggleHandler = (id: number) => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      }\n      return todo\n    }))\n  }\n\n  const removeHandler = (id: number) => {\n    const shouldRemove = window.confirm(\"Подтвердите удаление элемента\")\n    if (shouldRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id))\n    }\n  }\n\n  return (<>\n    <Navbar />\n    <div className=\"container\">\n      <TodoForm onAdd={addHandler} />\n      <TodoList todos={todos} onRemove={removeHandler} onToggle={toggleHandler} />\n    </div>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}